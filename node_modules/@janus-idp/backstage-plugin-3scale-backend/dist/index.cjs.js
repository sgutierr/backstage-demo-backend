'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var catalogModel = require('@backstage/catalog-model');
var backendTasks = require('@backstage/backend-tasks');

function listServices(baseUrl, access_token, page, size) {
  return fetch(
    `${baseUrl}/admin/api/services.json?access_token=${access_token}&page=${page}&size=${size}`
  ).then((response) => {
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    return response.json();
  });
}
function listApiDocs(baseUrl, access_token) {
  return fetch(
    `${baseUrl}/admin/api/active_docs.json?access_token=${access_token}`
  ).then((response) => {
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    return response.json();
  });
}
function getProxyConfig(baseUrl, access_token, service_id) {
  return fetch(
    `${baseUrl}/admin/api/services/${service_id}/proxy.json?access_token=${access_token}`
  ).then((response) => {
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    return response.json();
  });
}

function readThreeScaleApiEntityConfigs(config) {
  const providerConfigs = config.getOptionalConfig(
    "catalog.providers.threeScaleApiEntity"
  );
  if (!providerConfigs) {
    return [];
  }
  return providerConfigs.keys().map(
    (id) => readThreeScaleApiEntityConfig(id, providerConfigs.getConfig(id))
  );
}
function readThreeScaleApiEntityConfig(id, config) {
  const baseUrl = config.getString("baseUrl");
  const accessToken = config.getString("accessToken");
  const systemLabel = config.getOptionalString("systemLabel");
  const ownerLabel = config.getOptionalString("ownerLabel");
  const addLabels = config.getOptionalBoolean("addLabels") || true;
  const schedule = config.has("schedule") ? backendTasks.readTaskScheduleDefinitionFromConfig(config.getConfig("schedule")) : void 0;
  return {
    id,
    baseUrl,
    accessToken,
    systemLabel,
    ownerLabel,
    addLabels,
    schedule
  };
}

const _ThreeScaleApiEntityProvider = class {
  static fromConfig(configRoot, options) {
    const providerConfigs = readThreeScaleApiEntityConfigs(configRoot);
    if (!options.schedule && !options.scheduler) {
      throw new Error("Either schedule or scheduler must be provided.");
    }
    return providerConfigs.map((providerConfig) => {
      var _a;
      if (!options.schedule && !providerConfig.schedule) {
        throw new Error(
          `No schedule provided neither via code nor config for ThreeScaleApiEntityProvider:${providerConfig.id}.`
        );
      }
      const taskRunner = (_a = options.schedule) != null ? _a : options.scheduler.createScheduledTaskRunner(providerConfig.schedule);
      return new _ThreeScaleApiEntityProvider(
        providerConfig,
        options.logger,
        taskRunner
      );
    });
  }
  constructor(config, logger, taskRunner) {
    this.env = config.id;
    this.baseUrl = config.baseUrl;
    this.accessToken = config.accessToken;
    this.logger = logger.child({
      target: this.getProviderName()
    });
    this.scheduleFn = this.createScheduleFn(taskRunner);
  }
  createScheduleFn(taskRunner) {
    return async () => {
      const taskId = `${this.getProviderName()}:run`;
      return taskRunner.run({
        id: taskId,
        fn: async () => {
          try {
            await this.run();
          } catch (error) {
            this.logger.error(error);
          }
        }
      });
    };
  }
  getProviderName() {
    return `ThreeScaleApiEntityProvider:${this.env}`;
  }
  async connect(connection) {
    this.connection = connection;
    await this.scheduleFn();
  }
  async run() {
    if (!this.connection) {
      throw new Error("Not initialized");
    }
    this.logger.info(`Discovering ApiEntities from 3scale ${this.baseUrl}`);
    const entities = [];
    let page = 0;
    let services;
    let apiDocs;
    let fetchServices = true;
    while (fetchServices) {
      services = await listServices(
        this.baseUrl,
        this.accessToken,
        page,
        _ThreeScaleApiEntityProvider.SERVICES_FETCH_SIZE
      );
      apiDocs = await listApiDocs(this.baseUrl, this.accessToken);
      for (const element of services.services) {
        const service = element;
        this.logger.debug(`Find service ${service.service.name}`);
        const apiDoc = apiDocs.api_docs.find((obj) => {
          if (obj.api_doc.service_id !== void 0) {
            return obj.api_doc.service_id === service.service.id;
          }
          return false;
        });
        const proxy = await getProxyConfig(
          this.baseUrl,
          this.accessToken,
          service.service.id
        );
        if (apiDoc !== void 0) {
          this.logger.info(apiDoc);
          const apiEntity = this.buildApiEntityFromService(
            service,
            apiDoc,
            proxy
          );
          entities.push(apiEntity);
          this.logger.debug(`Discovered ApiEntity ${service.service.name}`);
        }
      }
      if (services.services.length < _ThreeScaleApiEntityProvider.SERVICES_FETCH_SIZE) {
        fetchServices = false;
      }
      page++;
    }
    this.logger.info(`Applying the mutation with ${entities.length} entities`);
    await this.connection.applyMutation({
      type: "full",
      entities: entities.map((entity) => ({
        entity,
        locationKey: this.getProviderName()
      }))
    });
  }
  buildApiEntityFromService(service, apiDoc, proxy) {
    const location = `url:${this.baseUrl}/apiconfig/services/${service.service.id}`;
    const spec = JSON.parse(apiDoc.api_doc.body);
    return {
      kind: "API",
      apiVersion: "backstage.io/v1alpha1",
      metadata: {
        annotations: {
          [catalogModel.ANNOTATION_LOCATION]: location,
          [catalogModel.ANNOTATION_ORIGIN_LOCATION]: location
        },
        //  TODO: add tenant name
        name: `${service.service.system_name}`,
        description: spec.info.description || `Version: ${service.service.description}`,
        //  TODO: add labels
        //  labels: this.getApiEntityLabels(service),
        links: [
          {
            url: `${this.baseUrl}/apiconfig/services/${service.service.id}`,
            title: "3scale Overview"
          },
          {
            url: `${proxy.proxy.sandbox_endpoint}`,
            title: "Staging Apicast Endpoint"
          },
          {
            url: `${proxy.proxy.endpoint}`,
            title: "Production Apicast Endpoint"
          }
        ]
      },
      spec: {
        type: "openapi",
        lifecycle: this.env,
        system: "3scale",
        owner: "3scale",
        definition: apiDoc.api_doc.body
      }
    };
  }
};
let ThreeScaleApiEntityProvider = _ThreeScaleApiEntityProvider;
ThreeScaleApiEntityProvider.SERVICES_FETCH_SIZE = 500;

exports.ThreeScaleApiEntityProvider = ThreeScaleApiEntityProvider;
exports.getProxyConfig = getProxyConfig;
exports.listApiDocs = listApiDocs;
exports.listServices = listServices;
//# sourceMappingURL=index.cjs.js.map
