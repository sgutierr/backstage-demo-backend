'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var alpha = require('@backstage/plugin-search-backend-node/alpha');
var pluginSearchBackendModuleTechdocs = require('@backstage/plugin-search-backend-module-techdocs');

const searchModuleTechDocsCollator = backendPluginApi.createBackendModule(
  (options) => ({
    moduleId: "techDocsCollator",
    pluginId: "search",
    register(env) {
      env.registerInit({
        deps: {
          config: backendPluginApi.coreServices.config,
          logger: backendPluginApi.coreServices.logger,
          discovery: backendPluginApi.coreServices.discovery,
          tokenManager: backendPluginApi.coreServices.tokenManager,
          scheduler: backendPluginApi.coreServices.scheduler,
          indexRegistry: alpha.searchIndexRegistryExtensionPoint
        },
        async init({
          config,
          logger,
          discovery,
          tokenManager,
          scheduler,
          indexRegistry
        }) {
          var _a;
          const defaultSchedule = {
            frequency: { minutes: 10 },
            timeout: { minutes: 15 },
            initialDelay: { seconds: 3 }
          };
          indexRegistry.addCollator({
            schedule: scheduler.createScheduledTaskRunner(
              (_a = options == null ? void 0 : options.schedule) != null ? _a : defaultSchedule
            ),
            factory: pluginSearchBackendModuleTechdocs.DefaultTechDocsCollatorFactory.fromConfig(config, {
              ...options,
              discovery,
              tokenManager,
              logger: backendCommon.loggerToWinstonLogger(logger)
            })
          });
        }
      });
    }
  })
);

exports.searchModuleTechDocsCollator = searchModuleTechDocsCollator;
//# sourceMappingURL=alpha.cjs.js.map
