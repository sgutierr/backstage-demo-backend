'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var catalogClient = require('@backstage/catalog-client');
var alpha = require('@backstage/plugin-catalog-common/alpha');
var stream = require('stream');
var catalogModel = require('@backstage/catalog-model');

const getDocumentText = (entity) => {
  var _a, _b;
  const documentTexts = [];
  documentTexts.push(entity.metadata.description || "");
  if (catalogModel.isUserEntity(entity) || catalogModel.isGroupEntity(entity)) {
    if ((_b = (_a = entity.spec) == null ? void 0 : _a.profile) == null ? void 0 : _b.displayName) {
      documentTexts.push(entity.spec.profile.displayName);
    }
  }
  return documentTexts.join(" : ");
};
const defaultCatalogCollatorEntityTransformer = (entity) => {
  var _a, _b, _c, _d, _e, _f, _g;
  return {
    title: (_a = entity.metadata.title) != null ? _a : entity.metadata.name,
    text: getDocumentText(entity),
    componentType: ((_c = (_b = entity.spec) == null ? void 0 : _b.type) == null ? void 0 : _c.toString()) || "other",
    type: ((_e = (_d = entity.spec) == null ? void 0 : _d.type) == null ? void 0 : _e.toString()) || "other",
    namespace: entity.metadata.namespace || "default",
    kind: entity.kind,
    lifecycle: ((_f = entity.spec) == null ? void 0 : _f.lifecycle) || "",
    owner: ((_g = entity.spec) == null ? void 0 : _g.owner) || ""
  };
};

class DefaultCatalogCollatorFactory {
  constructor(options) {
    this.type = "software-catalog";
    this.visibilityPermission = alpha.catalogEntityReadPermission;
    const {
      batchSize,
      discovery,
      locationTemplate,
      filter,
      catalogClient: catalogClient$1,
      tokenManager,
      entityTransformer
    } = options;
    this.locationTemplate = locationTemplate || "/catalog/:namespace/:kind/:name";
    this.filter = filter;
    this.batchSize = batchSize || 500;
    this.catalogClient = catalogClient$1 || new catalogClient.CatalogClient({ discoveryApi: discovery });
    this.tokenManager = tokenManager;
    this.entityTransformer = entityTransformer != null ? entityTransformer : defaultCatalogCollatorEntityTransformer;
  }
  static fromConfig(_config, options) {
    return new DefaultCatalogCollatorFactory(options);
  }
  async getCollator() {
    return stream.Readable.from(this.execute());
  }
  async *execute() {
    const { token } = await this.tokenManager.getToken();
    let entitiesRetrieved = 0;
    let moreEntitiesToGet = true;
    while (moreEntitiesToGet) {
      const entities = (await this.catalogClient.getEntities(
        {
          filter: this.filter,
          limit: this.batchSize,
          offset: entitiesRetrieved
        },
        { token }
      )).items;
      moreEntitiesToGet = entities.length === this.batchSize;
      entitiesRetrieved += entities.length;
      for (const entity of entities) {
        yield {
          ...this.entityTransformer(entity),
          authorization: {
            resourceRef: catalogModel.stringifyEntityRef(entity)
          },
          location: this.applyArgsToFormat(this.locationTemplate, {
            namespace: entity.metadata.namespace || "default",
            kind: entity.kind,
            name: entity.metadata.name
          })
        };
      }
    }
  }
  applyArgsToFormat(format, args) {
    let formatted = format;
    for (const [key, value] of Object.entries(args)) {
      formatted = formatted.replace(`:${key}`, value);
    }
    return formatted.toLowerCase();
  }
}

exports.DefaultCatalogCollatorFactory = DefaultCatalogCollatorFactory;
exports.defaultCatalogCollatorEntityTransformer = defaultCatalogCollatorEntityTransformer;
//# sourceMappingURL=index.cjs.js.map
