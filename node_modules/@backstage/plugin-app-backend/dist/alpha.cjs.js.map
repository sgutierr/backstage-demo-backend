{"version":3,"file":"alpha.cjs.js","sources":["../src/service/appPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { createRouter } from './router';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\n\n/** @alpha */\nexport type AppPluginOptions = {\n  /**\n   * The name of the app package (in most Backstage repositories, this is the\n   * \"name\" field in `packages/app/package.json`) that content should be served\n   * from. The same app package should be added as a dependency to the backend\n   * package in order for it to be accessible at runtime.\n   *\n   * In a typical setup with a single app package, this will default to 'app'.\n   */\n  appPackageName?: string;\n\n  /**\n   * A request handler to handle requests for static content that are not present in the app bundle.\n   *\n   * This can be used to avoid issues with clients on older deployment versions trying to access lazy\n   * loaded content that is no longer present. Typically the requests would fall back to a long-term\n   * object store where all recently deployed versions of the app are present.\n   *\n   * Another option is to provide a `database` that will take care of storing the static assets instead.\n   *\n   * If both `database` and `staticFallbackHandler` are provided, the `database` will attempt to serve\n   * static assets first, and if they are not found, the `staticFallbackHandler` will be called.\n   */\n  staticFallbackHandler?: express.Handler;\n\n  /**\n   * Disables the configuration injection. This can be useful if you're running in an environment\n   * with a read-only filesystem, or for some other reason don't want configuration to be injected.\n   *\n   * Note that this will cause the configuration used when building the app bundle to be used, unless\n   * a separate configuration loading strategy is set up.\n   *\n   * This also disables configuration injection though `APP_CONFIG_` environment variables.\n   */\n  disableConfigInjection?: boolean;\n\n  /**\n   * By default the app backend plugin will cache previously deployed static assets in the database.\n   * If you disable this, it is recommended to set a `staticFallbackHandler` instead.\n   */\n  disableStaticFallbackCache?: boolean;\n};\n\n/**\n * The App plugin is responsible for serving the frontend app bundle and static assets.\n * @alpha\n */\nexport const appPlugin = createBackendPlugin((options: AppPluginOptions) => ({\n  pluginId: 'app',\n  register(env) {\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.config,\n        database: coreServices.database,\n        httpRouter: coreServices.httpRouter,\n      },\n      async init({ logger, config, database, httpRouter }) {\n        const {\n          appPackageName,\n          staticFallbackHandler,\n          disableConfigInjection,\n          disableStaticFallbackCache,\n        } = options;\n        const winstonLogger = loggerToWinstonLogger(logger);\n\n        const router = await createRouter({\n          logger: winstonLogger,\n          config,\n          database: disableStaticFallbackCache ? undefined : database,\n          appPackageName: appPackageName ?? 'app',\n          staticFallbackHandler,\n          disableConfigInjection,\n        });\n        httpRouter.use(router);\n      },\n    });\n  },\n}));\n"],"names":["createBackendPlugin","coreServices","loggerToWinstonLogger","router","createRouter"],"mappings":";;;;;;;;;;;;;;;;;AAwEa,MAAA,SAAA,GAAYA,oCAAoB,CAAA,CAAC,OAA+B,MAAA;AAAA,EAC3E,QAAU,EAAA,KAAA;AAAA,EACV,SAAS,GAAK,EAAA;AACZ,IAAA,GAAA,CAAI,YAAa,CAAA;AAAA,MACf,IAAM,EAAA;AAAA,QACJ,QAAQC,6BAAa,CAAA,MAAA;AAAA,QACrB,QAAQA,6BAAa,CAAA,MAAA;AAAA,QACrB,UAAUA,6BAAa,CAAA,QAAA;AAAA,QACvB,YAAYA,6BAAa,CAAA,UAAA;AAAA,OAC3B;AAAA,MACA,MAAM,IAAK,CAAA,EAAE,QAAQ,MAAQ,EAAA,QAAA,EAAU,YAAc,EAAA;AACnD,QAAM,MAAA;AAAA,UACJ,cAAA;AAAA,UACA,qBAAA;AAAA,UACA,sBAAA;AAAA,UACA,0BAAA;AAAA,SACE,GAAA,OAAA,CAAA;AACJ,QAAM,MAAA,aAAA,GAAgBC,oCAAsB,MAAM,CAAA,CAAA;AAElD,QAAM,MAAAC,QAAA,GAAS,MAAMC,mBAAa,CAAA;AAAA,UAChC,MAAQ,EAAA,aAAA;AAAA,UACR,MAAA;AAAA,UACA,QAAA,EAAU,6BAA6B,KAAY,CAAA,GAAA,QAAA;AAAA,UACnD,gBAAgB,cAAkB,IAAA,IAAA,GAAA,cAAA,GAAA,KAAA;AAAA,UAClC,qBAAA;AAAA,UACA,sBAAA;AAAA,SACD,CAAA,CAAA;AACD,QAAA,UAAA,CAAW,IAAID,QAAM,CAAA,CAAA;AAAA,OACvB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAE,CAAA;;;;"}