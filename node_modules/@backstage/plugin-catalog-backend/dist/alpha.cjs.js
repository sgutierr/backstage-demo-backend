'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var alpha = require('@backstage/plugin-catalog-common/alpha');
var pluginPermissionNode = require('@backstage/plugin-permission-node');
var CatalogBuilder = require('./cjs/CatalogBuilder-6a9091b7.cjs.js');
var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha$1 = require('@backstage/plugin-catalog-node/alpha');
var backendCommon = require('@backstage/backend-common');
require('@backstage/catalog-model');
require('@backstage/integration');
require('crypto');
require('lodash');
require('@backstage/errors');
require('core-js/features/promise');
require('codeowners-utils');
require('git-url-parse');
require('@backstage/plugin-catalog-node');
require('fs-extra');
require('glob');
require('path');
require('util');
require('yaml');
require('p-limit');
require('uuid');
require('luxon');
require('prom-client');
require('lodash/uniq');
require('fast-json-stable-stringify');
require('@opentelemetry/api');
require('zod');
require('@backstage/catalog-client');
require('express');
require('express-promise-router');
require('yn');
require('@backstage/plugin-permission-common');
require('minimatch');

const { conditions, createConditionalDecision } = pluginPermissionNode.createConditionExports({
  pluginId: "catalog",
  resourceType: alpha.RESOURCE_TYPE_CATALOG_ENTITY,
  rules: CatalogBuilder.permissionRules
});
const catalogConditions = conditions;
const createCatalogConditionalDecision = createConditionalDecision;

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _processors, _entityProviders;
class CatalogExtensionPointImpl {
  constructor() {
    __privateAdd(this, _processors, new Array());
    __privateAdd(this, _entityProviders, new Array());
  }
  addProcessor(...processors) {
    __privateGet(this, _processors).push(...processors.flat());
  }
  addEntityProvider(...providers) {
    __privateGet(this, _entityProviders).push(...providers.flat());
  }
  get processors() {
    return __privateGet(this, _processors);
  }
  get entityProviders() {
    return __privateGet(this, _entityProviders);
  }
}
_processors = new WeakMap();
_entityProviders = new WeakMap();
const catalogPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "catalog",
  register(env) {
    const processingExtensions = new CatalogExtensionPointImpl();
    env.registerExtensionPoint(
      alpha$1.catalogProcessingExtensionPoint,
      processingExtensions
    );
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.config,
        reader: backendPluginApi.coreServices.urlReader,
        permissions: backendPluginApi.coreServices.permissions,
        database: backendPluginApi.coreServices.database,
        httpRouter: backendPluginApi.coreServices.httpRouter,
        lifecycle: backendPluginApi.coreServices.lifecycle,
        scheduler: backendPluginApi.coreServices.scheduler
      },
      async init({
        logger,
        config,
        reader,
        database,
        permissions,
        httpRouter,
        lifecycle,
        scheduler
      }) {
        const winstonLogger = backendCommon.loggerToWinstonLogger(logger);
        const builder = await CatalogBuilder.CatalogBuilder.create({
          config,
          reader,
          permissions,
          database,
          scheduler,
          logger: winstonLogger
        });
        builder.addProcessor(...processingExtensions.processors);
        builder.addEntityProvider(...processingExtensions.entityProviders);
        const { processingEngine, router } = await builder.build();
        await processingEngine.start();
        lifecycle.addShutdownHook(() => processingEngine.stop());
        httpRouter.use(router);
      }
    });
  }
});

exports.createCatalogPermissionRule = CatalogBuilder.createCatalogPermissionRule;
exports.permissionRules = CatalogBuilder.permissionRules;
exports.catalogConditions = catalogConditions;
exports.catalogPlugin = catalogPlugin;
exports.createCatalogConditionalDecision = createCatalogConditionalDecision;
//# sourceMappingURL=alpha.cjs.js.map
