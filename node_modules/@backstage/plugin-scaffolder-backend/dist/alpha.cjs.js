'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha = require('@backstage/plugin-catalog-node/alpha');
var ScaffolderEntitiesProcessor = require('./cjs/ScaffolderEntitiesProcessor-021c5dcb.cjs.js');
var alpha$1 = require('@backstage/plugin-scaffolder-common/alpha');
var pluginPermissionNode = require('@backstage/plugin-permission-node');
var backendCommon = require('@backstage/backend-common');
var integration = require('@backstage/integration');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
require('@backstage/errors');
require('fs-extra');
require('path');
require('globby');
require('isbinaryfile');
require('vm2');
require('@backstage/catalog-model');
require('lodash/get');
require('child_process');
require('stream');
require('azure-devops-node-api');
require('node-fetch');
require('crypto');
require('octokit');
require('octokit-plugin-create-pull-request');
require('fs');
require('p-limit');
require('@gitbeaker/node');
require('@octokit/webhooks');
require('zen-observable');
require('p-queue');
require('@backstage/plugin-scaffolder-common');
require('express');
require('express-promise-router');
require('jsonschema');
require('zod');
require('yaml');
require('luxon');
require('uuid');
require('winston');
require('nunjucks');
require('lodash');
require('prom-client');
require('@backstage/plugin-permission-common');
require('url');
require('os');
require('@backstage/plugin-catalog-node');

const catalogModuleTemplateKind = backendPluginApi.createBackendModule({
  moduleId: "scaffolder",
  pluginId: "templateKind",
  register(env) {
    env.registerInit({
      deps: {
        catalog: alpha.catalogProcessingExtensionPoint
      },
      async init({ catalog }) {
        catalog.addProcessor(new ScaffolderEntitiesProcessor.ScaffolderEntitiesProcessor());
      }
    });
  }
});

const templateConditionExports = pluginPermissionNode.createConditionExports({
  pluginId: "scaffolder",
  resourceType: alpha$1.RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,
  rules: ScaffolderEntitiesProcessor.scaffolderTemplateRules
});
const actionsConditionExports = pluginPermissionNode.createConditionExports({
  pluginId: "scaffolder",
  resourceType: alpha$1.RESOURCE_TYPE_SCAFFOLDER_ACTION,
  rules: ScaffolderEntitiesProcessor.scaffolderActionRules
});
const createScaffolderTemplateConditionalDecision = templateConditionExports.createConditionalDecision;
const scaffolderTemplateConditions = templateConditionExports.conditions;
const createScaffolderActionConditionalDecision = actionsConditionExports.createConditionalDecision;
const scaffolderActionConditions = actionsConditionExports.conditions;

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _actions;
class ScaffolderActionsExtensionPointImpl {
  constructor() {
    __privateAdd(this, _actions, new Array());
  }
  addActions(...actions) {
    __privateGet(this, _actions).push(...actions);
  }
  get actions() {
    return __privateGet(this, _actions);
  }
}
_actions = new WeakMap();
const scaffolderPlugin = backendPluginApi.createBackendPlugin(
  (options) => ({
    pluginId: "scaffolder",
    register(env) {
      const actionsExtensions = new ScaffolderActionsExtensionPointImpl();
      env.registerExtensionPoint(
        pluginScaffolderNode.scaffolderActionsExtensionPoint,
        actionsExtensions
      );
      env.registerInit({
        deps: {
          logger: backendPluginApi.coreServices.logger,
          config: backendPluginApi.coreServices.config,
          reader: backendPluginApi.coreServices.urlReader,
          permissions: backendPluginApi.coreServices.permissions,
          database: backendPluginApi.coreServices.database,
          httpRouter: backendPluginApi.coreServices.httpRouter,
          catalogClient: alpha.catalogServiceRef
        },
        async init({
          logger,
          config,
          reader,
          database,
          httpRouter,
          catalogClient,
          permissions
        }) {
          const {
            additionalTemplateFilters,
            taskBroker,
            taskWorkers,
            additionalTemplateGlobals
          } = options != null ? options : {};
          const log = backendCommon.loggerToWinstonLogger(logger);
          const actions = (options == null ? void 0 : options.actions) || [
            ...actionsExtensions.actions,
            ...ScaffolderEntitiesProcessor.createBuiltinActions({
              integrations: integration.ScmIntegrations.fromConfig(config),
              catalogClient,
              reader,
              config,
              additionalTemplateFilters,
              additionalTemplateGlobals
            })
          ];
          const actionIds = actions.map((action) => action.id).join(", ");
          log.info(
            `Starting scaffolder with the following actions enabled ${actionIds}`
          );
          const router = await ScaffolderEntitiesProcessor.createRouter({
            logger: log,
            config,
            database,
            catalogClient,
            reader,
            actions,
            taskBroker,
            taskWorkers,
            additionalTemplateFilters,
            additionalTemplateGlobals,
            permissions
          });
          httpRouter.use(router);
        }
      });
    }
  })
);

exports.catalogModuleTemplateKind = catalogModuleTemplateKind;
exports.createScaffolderActionConditionalDecision = createScaffolderActionConditionalDecision;
exports.createScaffolderTemplateConditionalDecision = createScaffolderTemplateConditionalDecision;
exports.scaffolderActionConditions = scaffolderActionConditions;
exports.scaffolderPlugin = scaffolderPlugin;
exports.scaffolderTemplateConditions = scaffolderTemplateConditions;
//# sourceMappingURL=alpha.cjs.js.map
